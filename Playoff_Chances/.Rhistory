library(tidyverse)
options(stringsAsFactors = FALSE)
standings <- read_csv("playoff_chances.csv")
View(standings)
url <- "https://api.sleeper.app/v1/league/307655088971718656/rosters"
install.packages("httr")
install.packages("httr")
library(httr)
r <- GET(url)
View(r)
r$request
r$request$output
content(r)
s <- content(r)
View(s)
s <- content(r)
s
View(s)
s[[1]]
url <- "https://api.sleeper.app/v1/league/307655088971718656/rosters"
r_get <- GET(url)
s_content <- content(r)
users_url <- "https://api.sleeper.app/v1/league/307655088971718656/users"
us_get <- GET(users_url)
us_content <- content(us_get)
s_content <- content(r_get)
url <- "https://api.sleeper.app/v1/league/307655088971718656/rosters"
r_get <- GET(url)
s_content <- content(r_get)
users_url <- "https://api.sleeper.app/v1/league/307655088971718656/users"
us_get <- GET(users_url)
us_content <- content(us_get)
View(us_content)
us_content[[1]]
us_content[[1]]$user_id,us_content[[1]]$display_name
us_content[[1]]$display_name
extract_df <- function(lst){
user_id <- lst$user_id
display_name <- lst$display_name
}
extract_df <- function(lst){
user_id <- lst$user_id
display_name <- lst$display_name
return(c(user_id,display_name))
}
lapply(us_content, extract_df)
user_names <- lapply(us_content, extract_df)
user_names
simplify(user_names)
purrr::map_dfr( user_names, as.list )
bind_rows(lapply(user_names, as.data.frame.list))
extract_df <- function(lst){
user_id <- lst$user_id
display_name <- lst$display_name
vec <- c(user_id,display_name)
names(vec) <- c("user_id","name")
return(vec)
}
user_names <- lapply(us_content, extract_df)
bind_rows(lapply(user_names, as.data.frame.list))
user_df <- bind_rows(lapply(user_names, as.data.frame.list))
s_content
s_content[[1]]
s_content[[1]]$settings
as.vector(s_content[[1]]$settings)
as.data.frame(s_content[[1]]$settings)
s_content[[1]]
s_content[[1]]
extract_standings_info <- function(lst){
sets <- as.data.frame(lst$settings)
sets$user_id <- lst$owner_id
return(sets)
}
s_clean <- lapply(s_content,extract_standings_info)
View(s_content)
s_clean[[1]]
standings_df <- bind_rows(lapply(s_clean,as.data.frame.list))
View(standings_df)
final_df <- standings_df %>% inner_join(users_df)
final_df <- standings_df %>% inner_join(user_df)
View(final_df)
url <- "https://api.sleeper.app/v1/league/307655088971718656/rosters"
r_get <- GET(url)
s_content <- content(r_get)
extract_standings_info <- function(lst){
sets <- as.data.frame(lst$settings)
sets$user_id <- lst$owner_id
return(sets)
}
s_clean <- lapply(s_content,extract_standings_info)
standings_df <- bind_rows(lapply(s_clean,as.data.frame.list))
users_url <- "https://api.sleeper.app/v1/league/307655088971718656/users"
us_get <- GET(users_url)
us_content <- content(us_get)
extract_df <- function(lst){
user_id <- lst$user_id
display_name <- lst$display_name
vec <- c(user_id,display_name)
names(vec) <- c("user_id","name")
return(vec)
}
user_names <- lapply(us_content, extract_df)
user_df <- bind_rows(lapply(user_names, as.data.frame.list))
final_df <- standings_df %>% inner_join(user_df)
write.csv(final_df,"sleeper_current_standings.csv")
library(tidyverse)
options(stringsAsFactors = FALSE)
standings <- read_csv("sleeper_current_standings.csv")
View(standings)
?write_csv
write_csv(final_df,"sleeper_current_standings.csv")
url <- "https://api.sleeper.app/v1/league/307655088971718656/rosters"
r_get <- GET(url)
s_content <- content(r_get)
extract_standings_info <- function(lst){
sets <- as.data.frame(lst$settings)
sets$user_id <- lst$owner_id
return(sets)
}
s_clean <- lapply(s_content,extract_standings_info)
standings_df <- bind_rows(lapply(s_clean,as.data.frame.list))
users_url <- "https://api.sleeper.app/v1/league/307655088971718656/users"
us_get <- GET(users_url)
us_content <- content(us_get)
extract_df <- function(lst){
user_id <- lst$user_id
display_name <- lst$display_name
vec <- c(user_id,display_name)
names(vec) <- c("user_id","name")
return(vec)
}
user_names <- lapply(us_content, extract_df)
user_df <- bind_rows(lapply(user_names, as.data.frame.list))
final_df <- standings_df %>% inner_join(user_df)
write_csv(final_df,"sleeper_current_standings.csv")
library(tidyverse)
options(stringsAsFactors = FALSE)
standings <- read_csv("sleeper_current_standings.csv")
playoff_df <- as.data.frame(standings$Team)
playoff_df <- as.data.frame(standings$name)
playoff_df$made <- 0
colnames(playoff_df)[1] <- "Team"
playoff_df
standings$ppts
standings$fpts_decimal
score_std_dev <- sd(standings$ppts)
score_std_dev
sched <- read_csv("rem_schedule.csv")
View(standings)
View(sched)
sched
within(df, FOO<-data.frame(do.call('rbind', strsplit(as.character(sched), '|', fixed=TRUE))))
with(df, FOO<-data.frame(do.call('rbind', strsplit(as.character(sched), '|', fixed=TRUE))))
FOO<-data.frame(do.call('rbind', strsplit(as.character(sched), '|', fixed=TRUE)))
View(FOO)
FOO<-data.frame(do.call('rbind', strsplit(as.character(sched), '\t', fixed=TRUE)))
sched
sched[1]
strsplit(sched[1],"\t"
)
strsplit(sched[1],"\t")
?strsplit
strsplit(as.character(sched[1]),"\t")
strsplit(as.character(sched,"\t")
)
sched <- read_csv("r_sched_2.csv")
sched
sched <- read_csv("r_sched_2.csv")
sched
as.numeric(sched$Week)
sched <- sched %>% mutate(
Week = as.numeric(Week),
Matchup = as.numeric(Matchup)
)
sched
standings
standings$ppts
score_std_dev
library(tidyverse)
options(stringsAsFactors = FALSE)
standings <- read_csv("sleeper_current_standings.csv")
playoff_df <- as.data.frame(standings$name)
playoff_df$made <- 0
colnames(playoff_df)[1] <- "Team"
score_std_dev <- sd(standings$ppts)
sched <- read_csv("r_sched_2.csv")
sched <- sched %>% mutate(
Week = as.numeric(Week),
Matchup = as.numeric(Matchup)
)
#sched <- sched %>% select(-X4,-X5)
library(foreach)
n <- 50
pb <- txtProgressBar(0, n, style = 2)
## Generate random df scores
t <- foreach(i=1:5000) %do% {
setTxtProgressBar(pb, i)
scores <- as.data.frame(replicate(3,rnorm(10, mean = standings$ppts, sd = score_std_dev)))
scores$Team <- standings$Team
## Need to find a better way to extract this
colnames(scores)[1:3] <- c(9,10,11)
scores <- reshape2::melt(scores)
colnames(scores)[2] <- "Week"
scores$Week <- as.numeric(scores$Week)
scores$Week[scores$Week == 1] <- 9
scores$Week[scores$Week == 2] <- 10
scores$Week[scores$Week == 3] <- 11
sched2 <- inner_join(scores,sched)
sched_sim <- sched2 %>% group_by(Week,Matchup) %>%
mutate(win = ifelse(value>lag(value),1,0),
win = ifelse(is.na(win), 1-sum(win,na.rm = TRUE), win),
loss = 1-win) %>% ungroup()
sim_record <- sched_sim %>% group_by(Team) %>%
summarize(sim_win = sum(win),
sim_loss = sum(loss),
points_scored = sum(value)) %>% ungroup()
ext_standings <- inner_join(standings,sim_record)
ext_standings <- ext_standings %>%
mutate(update_W = W + sim_win,
update_L = L + sim_loss,
win_pct = update_W/(update_L+update_W),
upd_pts_scored = `Pts For` + points_scored) %>%
arrange(-win_pct,-upd_pts_scored) %>%
mutate(rank= row_number(),
playoffs = ifelse(rank<=7,1,0))
playoff_odds <- ext_standings %>% select(Team,playoffs)
inner_join(playoff_df,playoff_odds)
}
library(tidyverse)
options(stringsAsFactors = FALSE)
standings <- read_csv("sleeper_current_standings.csv")
playoff_df <- as.data.frame(standings$name)
playoff_df$made <- 0
colnames(playoff_df)[1] <- "Team"
score_std_dev <- sd(standings$ppts)
sched <- read_csv("r_sched_2.csv")
sched <- sched %>% mutate(
Week = as.numeric(Week),
Matchup = as.numeric(Matchup)
)
#sched <- sched %>% select(-X4,-X5)
library(foreach)
n <- 50
pb <- txtProgressBar(0, n, style = 2)
## Generate random df scores
t <- foreach(i=1:50) %do% {
setTxtProgressBar(pb, i)
scores <- as.data.frame(replicate(3,rnorm(10, mean = standings$ppts, sd = score_std_dev)))
scores$Team <- standings$Team
## Need to find a better way to extract this
colnames(scores)[1:3] <- c(9,10,11)
scores <- reshape2::melt(scores)
colnames(scores)[2] <- "Week"
scores$Week <- as.numeric(scores$Week)
scores$Week[scores$Week == 1] <- 9
scores$Week[scores$Week == 2] <- 10
scores$Week[scores$Week == 3] <- 11
sched2 <- inner_join(scores,sched)
sched_sim <- sched2 %>% group_by(Week,Matchup) %>%
mutate(win = ifelse(value>lag(value),1,0),
win = ifelse(is.na(win), 1-sum(win,na.rm = TRUE), win),
loss = 1-win) %>% ungroup()
sim_record <- sched_sim %>% group_by(Team) %>%
summarize(sim_win = sum(win),
sim_loss = sum(loss),
points_scored = sum(value)) %>% ungroup()
ext_standings <- inner_join(standings,sim_record)
ext_standings <- ext_standings %>%
mutate(update_W = W + sim_win,
update_L = L + sim_loss,
win_pct = update_W/(update_L+update_W),
upd_pts_scored = `Pts For` + points_scored) %>%
arrange(-win_pct,-upd_pts_scored) %>%
mutate(rank= row_number(),
playoffs = ifelse(rank<=7,1,0))
playoff_odds <- ext_standings %>% select(Team,playoffs)
inner_join(playoff_df,playoff_odds)
}
final_res <- bind_rows(t) %>% group_by(Team) %>%
summarize(Playoff_Apps = sum(playoffs),
pct_chance = Playoff_Apps/5000)
warnings()
library(tidyverse)
options(stringsAsFactors = FALSE)
standings <- read_csv("sleeper_current_standings.csv")
standings$Team <- standings$name
playoff_df <- as.data.frame(standings$name)
playoff_df$made <- 0
colnames(playoff_df)[1] <- "Team"
score_std_dev <- sd(standings$ppts)
sched <- read_csv("r_sched_2.csv")
sched <- sched %>% mutate(
Week = as.numeric(Week),
Matchup = as.numeric(Matchup)
)
#sched <- sched %>% select(-X4,-X5)
library(foreach)
n <- 50
pb <- txtProgressBar(0, n, style = 2)
## Generate random df scores
t <- foreach(i=1:50) %do% {
setTxtProgressBar(pb, i)
scores <- as.data.frame(replicate(3,rnorm(10, mean = standings$ppts, sd = score_std_dev)))
scores$Team <- standings$Team
## Need to find a better way to extract this
colnames(scores)[1:3] <- c(9,10,11)
scores <- reshape2::melt(scores)
colnames(scores)[2] <- "Week"
scores$Week <- as.numeric(scores$Week)
scores$Week[scores$Week == 1] <- 9
scores$Week[scores$Week == 2] <- 10
scores$Week[scores$Week == 3] <- 11
sched2 <- inner_join(scores,sched)
sched_sim <- sched2 %>% group_by(Week,Matchup) %>%
mutate(win = ifelse(value>lag(value),1,0),
win = ifelse(is.na(win), 1-sum(win,na.rm = TRUE), win),
loss = 1-win) %>% ungroup()
sim_record <- sched_sim %>% group_by(Team) %>%
summarize(sim_win = sum(win),
sim_loss = sum(loss),
points_scored = sum(value)) %>% ungroup()
ext_standings <- inner_join(standings,sim_record)
ext_standings <- ext_standings %>%
mutate(update_W = W + sim_win,
update_L = L + sim_loss,
win_pct = update_W/(update_L+update_W),
upd_pts_scored = `Pts For` + points_scored) %>%
arrange(-win_pct,-upd_pts_scored) %>%
mutate(rank= row_number(),
playoffs = ifelse(rank<=7,1,0))
playoff_odds <- ext_standings %>% select(Team,playoffs)
inner_join(playoff_df,playoff_odds)
}
final_res <- bind_rows(t) %>% group_by(Team) %>%
summarize(Playoff_Apps = sum(playoffs),
pct_chance = Playoff_Apps/5000)
View(playoff_df)
View(ext_standings)
library(tidyverse)
options(stringsAsFactors = FALSE)
standings <- read_csv("sleeper_current_standings.csv")
standings$Team <- standings$name
playoff_df <- as.data.frame(standings$name)
playoff_df$made <- 0
colnames(playoff_df)[1] <- "Team"
score_std_dev <- sd(standings$ppts)
sched <- read_csv("r_sched_2.csv")
sched <- sched %>% mutate(
Week = as.numeric(Week),
Matchup = as.numeric(Matchup)
)
scores <- as.data.frame(replicate(3,rnorm(10, mean = standings$ppts, sd = score_std_dev)))
scores
scores$Team <- standings$Team
scores
## Need to find a better way to extract this
colnames(scores)[1:3] <- c(9,10,11)
scores
## Need to find a better way to extract this
colnames(scores)[1:3] <- c(11,12,13)
scores <- reshape2::melt(scores)
scores
standings$fpts
scores <- as.data.frame(replicate(3,rnorm(10, mean = standings$ppts, sd = score_std_dev)))
scores$Team <- standings$name
## Need to find a better way to extract this
colnames(scores)[1:3] <- c(11,12,13)
scores
standings[,c("fpts")]
standings[,c("fpts","name")]
scores
scores <- reshape2::melt(scores)
colnames(scores)[2] <- "Week"
scores$Week <- as.numeric(scores$Week)
scores$Week[scores$Week == 1] <- 11
scores$Week[scores$Week == 2] <- 12
scores$Week[scores$Week == 3] <- 13
scores
sched2 <- inner_join(scores,sched)
sched2
scores <- as.data.frame(replicate(3,rnorm(10, mean = standings$ppts, sd = score_std_dev)))
scores$Team <- standings$name
## Need to find a better way to extract this
colnames(scores)[1:3] <- c(11,12,13)
scores <- reshape2::melt(scores)
colnames(scores)[2] <- "Week"
scores$Week <- as.numeric(scores$Week)
scores
scores <- as.data.frame(replicate(3,rnorm(10, mean = standings$ppts, sd = score_std_dev)))
scores$Team <- standings$name
## Need to find a better way to extract this
colnames(scores)[1:3] <- c(11,12,13)
scores
scores <- reshape2::melt(scores)
colnames(scores)[2] <- "Week"
scores$Week <- as.numeric(scores$Week)
scores
scores$Week <- as.numeric(scores$Week)
scores$Week[scores$Week == 1] <- 11
scores$Week[scores$Week == 2] <- 12
scores$Week[scores$Week == 3] <- 13
scores
sched2 <- inner_join(scores,sched)
sched2
